import matplotlib.pyplot as plt
import matplotlib.patches as patches

class Box:
    def __init__(self):
        """
        Inicializa la maquina de estados finitos para reconocer la palabra 'box'.
        Define los estados y transiciones necesarios.
        """
        self.states = {
            0: {'b': (1, 'R')},
            1: {'o': (2, 'R')},
            2: {'x': (3, 'R')},
        }
        self.state = 0

    def process_word(self, word):
        """
        Realiza una transicion de estado basada en el caracter de entrada.

        Args:
            word (str): Palabra ingresada.

        Returns:
            bool: True si la transicion es valida, False si no lo es.
        """
        for char in word:
            if self.state in self.states and char in self.states[self.state]:
                next_state, direction = self.states[self.state][char]
                print(f"Transicion: estado {self.state} -> {next_state} con '{char}'")
                self.state = next_state
            else:
                print(f"Error: '{char}' no es valido en el estado {self.state}")
                return False
        return self.state == 3

    def draw_box(self, ancho, alto):
        """
        Dibuja un rectangulo en base al ancho y alto dados.

        Args:
            ancho (float): Ancho del rectangulo.
            alto (float): Alto del rectangulo.
        """
        fig, ax = plt.subplots()

        #Dibuja el rectangulo
        rectangle = patches.Rectangle((0, 0), ancho, alto, edgecolor='magenta', linewidth=2, fill=False)
        ax.add_patch(rectangle)

        #Configura el grafico
        ax.set_xlim(0, ancho + 1)
        ax.set_ylim(0, alto + 1)
        ax.set_aspect('equal', 'box')

        #Agregamos las lineas de los ejes
        ax.axhline(0, color='black', linewidth=0.5)
        ax.axvline(0, color='black', linewidth=0.5)

        #Tambien incorporamos una cuadricula
        ax.grid(color='gray', linestyle='--', linewidth=0.5)

        #Muestra el grafico
        plt.title(f'El rectangulo cuenta con un ancho de {ancho} y un alto de {alto}')
        plt.xlabel('X')
        plt.ylabel('Y')
        plt.show()

        #Retorna el objeto rectangulo creado
        return rectangle

def main():
    b = Box()
    ancho = 8
    alto = 4

    input_word = input("Ingresa la palabra: ").lower()

    #Verifica si la palabra ingresada es correcta y visualiza el rectangulo
    if b.process_word(input_word):
        print("¡HAS COMPLETADO EL RECTANGULO, FELICITACIONES!")
        b.draw_box(ancho, alto)
    else:
        print("Lo siento, la palabra es incorrecta.")
        print("El rectangulo no se pudo completar. ¡Intentalo de nuevo!")

if __name__ == "__main__":
    main()
